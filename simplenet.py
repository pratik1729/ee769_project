# -*- coding: utf-8 -*-
"""simplenet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P7A6sI2ayH9e7aW2we7fjUlwat9QHkKR
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

# Imports
import numpy as np
import tensorflow as tf
import pandas as pd
import cv2

tf.logging.set_verbosity(tf.logging.INFO)

from google.colab import files
uploaded = files.upload()

def cnn_model_fn(features, labels, mode):
  """Model function for CNN."""
  config = tf.ConfigProto()
  config.gpu_options.allow_growth = True

  #with tf.device('/device:GPU:0'):
  # Input Layer
  input_layer =features["x"]# tf.reshape(features["x"], [-1, 28, 28, 1])
  
  print(input_layer.shape)

  # Convolutional Layer #1
  conv1 = tf.layers.conv2d(
      inputs=input_layer,
      filters=32,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)
  
  print('conv1 shape')
  print(conv1)
  
  # Pooling Layer #1
  # pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)
  pool1 = tf.layers.average_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)
  
  print('pool1 shape')
  print(pool1)
  
  # Convolutional Layer #2 and Pooling Layer #2
  conv2 = tf.layers.conv2d(
      inputs=pool1,
      filters=64,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)
  
  print('conv2 shape')
  print(conv2)
  
  # pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)
  pool2 = tf.layers.average_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)
  
  print('pool2 shape')
  print(pool2)
  
  layer_shape = pool2.get_shape()
  num_features = layer_shape[1:4].num_elements()
  pool2_flat = tf.reshape(pool2, [-1, num_features])
  print('pool2_flat shape')
  print(pool2_flat)
  print('num feat')
  print(num_features)
  print('layer shape')
  print(layer_shape)

  
  # Dense Layer
  #pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])
  dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)
  print('dense')
  print(dense)
  dropout = tf.layers.dropout(
      inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)

  # Logits Layer
  logits = tf.layers.dense(inputs=dropout, units=3)

  predictions = {
      # Generate predictions (for PREDICT and EVAL mode)
      "classes": tf.argmax(input=logits, axis=1),
      # Add `softmax_tensor` to the graph. It is used for PREDICT and by the
      # `logging_hook`.
      "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
  }

  if mode == tf.estimator.ModeKeys.PREDICT:
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)

  # Calculate Loss (for both TRAIN and EVAL modes)
  loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)

  # Configure the Training Op (for TRAIN mode)
  if mode == tf.estimator.ModeKeys.TRAIN:
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
    train_op = optimizer.minimize(
        loss=loss,
        global_step=tf.train.get_global_step())
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)

  # Add evaluation metrics (for EVAL mode)
  eval_metric_ops = {
      "accuracy": tf.metrics.accuracy(
          labels=labels, predictions=predictions["classes"])}
  return tf.estimator.EstimatorSpec(
      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)

def main(unused_argv):
  # Load training

  datainfo_train=pd.read_csv("transformed_data_info_2_train.csv")
  instances_column=datainfo_train['ref_num']
  train_labels=datainfo_train['severity']
  train_data=[] 
  for p in range(len(instances_column)):
    imname=instances_column[p]+'.pgm'
    image=cv2.imread(imname)
    train_data.append(image)
   
  train_data = np.asarray(train_data, dtype=np.float32)
  classmap={'N':0,'B':1,'M':2}
  train_labels=train_labels.map(classmap)
  
  #load test data
  datainfo_test=pd.read_csv("transformed_data_info_2_test.csv")
  instances_column=datainfo_test['ref_num']
  test_labels=datainfo_test['severity']
  test_data=[]
  
  for p in range(len(instances_column)):
    imname=instances_column[p]+'.pgm'
    image=cv2.imread(imname)
    test_data.append(image)
   
  test_data = np.asarray(test_data, dtype=np.float32)
  classmap={'N':0,'B':1,'M':2}
  test_labels=test_labels.map(classmap)
  
    # Create the Estimator
  mnist_classifier = tf.estimator.Estimator(model_fn=cnn_model_fn, model_dir="/tmp/mnist_convnet_model")
  
 # Set up logging for predictions
  tensors_to_log = {"probabilities": "softmax_tensor"}
  logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)

  train_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": train_data},
    y=train_labels,
    batch_size=490,
    num_epochs=None,
    shuffle=True)
  mnist_classifier.train(
    input_fn=train_input_fn,
    steps=5000,hooks=[logging_hook])
  # Evaluate the model and print results
  eval_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": test_data},
    y=test_labels,
    num_epochs=1,
    shuffle=False)
  
  # Evaluate the model and print results
  eval_input_fn_test = tf.estimator.inputs.numpy_input_fn(x={"x": test_data},y=test_labels,num_epochs=1,shuffle=False)
  eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn_test)
  print('TEST ACCURACY: ')
  print(eval_results)
  
  eval_input_fn_train = tf.estimator.inputs.numpy_input_fn(x={"x": train_data},y=train_labels,num_epochs=1,shuffle=False)
  eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn_train)
  print('TRAINING ACCURACY: ')
  print(eval_results)

main(1)
